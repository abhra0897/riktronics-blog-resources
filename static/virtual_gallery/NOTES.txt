Adding text to 3D space is possible using CSS3DRenderer(). But it has some problems which I explained at the bottom.
Due to those problems, for now, I couldn't use is successfully in my project.

--------------------------------------------------------------------------------

To use CSS3DRenderer,

1. Add two containers in html. One for webGL and another for CSS3D. Adding both renderer to body won't work.

<div class="canvas-parent">
    <div class="canvas-container"></div>
    <div class="canvas-container canvas-container-css"></div>
</div>
.canvas-container {
    position: absolute;
    top: 0;
    left: 0;
}
.canvas-container-css {
    pointer-events: none;
}

2. import CSS3DRenderer and CSS3DObject.

import { CSS3DRenderer, CSS3DObject } from 'three/addons/renderers/CSS3DRenderer.js';

3. Create CSS3D renderer and WebGL renderer.

// Create WebGL Renderer
renderer = new THREE.WebGLRenderer({
    antialias: true,
});
renderer.setSize(window.innerWidth, window.innerHeight);
document.querySelector('.canvas-container').appendChild(renderer.domElement);
// Create Css3D Renderer
cssRenderer = new CSS3DRenderer();
cssRenderer.setSize(window.innerWidth, window.innerHeight);
document.querySelector('.canvas-container-css').appendChild(cssRenderer.domElement);

4. Prepare animate() funtion. Note: We can ofc add css and webgl objects in the same scene.

But herer we are using 2 different scenes.
requestAnimationFrame(animate);
renderer.render(scene, camera);
cssRenderer.render(sceneCss, camera);

5. Add html elements:

(css):
.credit-container {
    width: 10px;
    height: 16px;
    box-shadow: 0px 0px 12px rgba(0,255,255,0.5);
    border: 1px solid rgba(127,255,255,0.25);
    font-family: Helvetica, sans-serif;
    text-align: center;
    line-height: normal;
    cursor: default;
}

(js):
const element = document.createElement('div');
element.className = 'credit-container';
element.style.backgroundColor = 'rgba(0,127,127,' + ( Math.random() * 0.5 + 0.25 ) + ')';
const para = document.createElement('p');
para.innerHTML = "Hello";
element.appendChild(para);
const objectCSS = new CSS3DObject( element );
objectCSS.position.set(0, 0, 0);
sceneCss.add(objectCSS);

--------------------------------------------------------------------------------

PROBLEMS:

But, there are problems with this approach. Scaling of these two renderers don't match.
CSS3D objects will look massive compared to Threejs objects.
Also, while moving camera, objects will move at different speed. There will be a drifting effect.
Some attempts to solve it:

1. Try changing scale:

// Scale down css3d scene. Try 0.1, 0.25, 0.01 etc. values.
sceneCss.scale.set(0.01, 0.01, 0.01);
// Multiply position of CSS3D object as per above scaling.
objectCSS.position.set(5*100, 2*100, 12*100);

2. Try setting camera position seperately for both scenes, in animate() function:

camera.position.multiplyScalar(10);
renderer.render( scene2, camera );
camera.position.divideScalar(10);
rendererCss.render( scene, camera );
-------------------------------------------------------------------------------

Useful links:
1. (About the problem) https://discourse.threejs.org/t/scale-css3drenderer-respect-to-webglrenderer/4938/10
2. https://github.com/mrdoob/three.js/blob/master/examples/css3d_periodictable.html
3. https://threejs.org/docs/?q=object3#manual/en/introduction/Creating-text
